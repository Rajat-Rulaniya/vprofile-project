def COLOR_MAP = [
    'SUCCESS': 'good',
    'FAILURE': 'danger',
]
pipeline {
    agent any

    tools {
        maven 'MAVEN3'
        jdk 'OracleJDK17'
    }

    environment {
        NEXUS_CREDENTIALS = credentials('NEXUS_CREDENTIALS')
        NEXUS_USER = "${NEXUS_CREDENTIALS_USR}"
        NEXUS_PASS = "${NEXUS_CREDENTIALS_PSW}"
        RELEASE_REPO = 'vproapp-release'
        CENTRAL_REPO = 'vproapp-central'
        NEXUS_GRP_REPO = 'vproapp-group'
        NEXUSIP = '3.227.253.245'
        NEXUSPORT = '8081'
        NEXUS_LOGIN = 'nexuslogin'
        SONARSERVER = 'sonarserver'
        SONARSCANNER = 'sonarscanner'
        registryCredential = 'ecr:us-east-1:awscreds'
        appRegistry = 'public.ecr.aws/j6f0n1t4/vproapp/repo'
        vprofileRegistry = 'https://public.ecr.aws/j6f0n1t4/vproapp/repo'
        cluster = "vproapp-staging"
        service = "vproapp-svc"
    }

    stages {
        stage('Build') {
            steps {
                sh 'mvn -s settings.xml -DskipTests install'
            }
            post {
                success {
                    echo 'Now Archiving.'
                    archiveArtifacts artifacts: '**/*.war'
                }
            }
        }

        stage('Test') {
            steps {
                sh 'mvn -s settings.xml test'
            }
        }

        stage('Checkstyle Analysis') {
            steps {
                sh 'mvn -s settings.xml checkstyle:checkstyle'
            }
        }

        stage('Sonar Analysis') {
            environment {
                scannerHome = tool "${SONARSCANNER}"
            }
            steps {
                withSonarQubeEnv("${SONARSERVER}") {
                    sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vproapp-cicd \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Docker Build Image') {
            steps {
                script {
                    dockerImage = docker.build(appRegistry + ":$BUILD_NUMBER", '.')

                    // Keeps only last 2 images, delete the rest

                    sh 'docker images --format "{{.ID}}" --filter=reference="public.ecr.aws/j6f0n1t4/vproapp repo:*" | tail -n +3 | xargs -r docker rmi -f'
                }
            }
        }

        stage('Upload App Image') {
            steps {
                script { // Uploading to public ecr repository
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'awscreds']]) {
                        sh 'aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/j6f0n1t4/vproapp/repo'
                        
                        docker.withRegistry(vprofileRegistry) {
                            dockerImage.push("$BUILD_NUMBER")
                            dockerImage.push('latest')
                        }
                    }
                }
            }
            post {
                success{
                    script {
                        echo 'Slack Notification...'

                        def currentStatus = currentBuild.currentResult
                        def message = ""

                        if (currentStatus == "FAILURE") {
                            message = "*${currentStatus}:* Job ${env.JOB_NAME} \n ❌ Failed to upload Docker Image to the ECR repository \n More info at: ${env.BUILD_URL}"
                        } else {
                            message = "*${currentStatus}:* Job ${env.JOB_NAME} \n ✅ Docker Image uploaded successfully to the ECR repository \n Image: ${appRegistry}:${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
                        }                    

                        slackSend channel: '#jenkinscicd', 
                            color: COLOR_MAP[currentStatus],
                            message: message                        
                        }
                }
            }
        }

        stage("Deploy to ECS staging") {
            steps {
                withAWS(credentials: 'awscreds', region: 'us-east-1') {
                    sh 'aws ecs update-service --cluster ${cluster} --service ${service} --force-new-deployment'
                }
            }
        }
    }
}
